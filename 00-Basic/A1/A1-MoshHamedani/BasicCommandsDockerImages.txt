
COMMAND:

________________________________________________________________
Run new image from one container:
Ubuntu-OS@Username:~/../../AcDocker$ docker run -it ubuntu
Or:
Ubuntu-OS@Username:~/../../AcDocker$ docker run -it react-app

________________________________________________________________
Start again a image from CONTAINER ID:
Ubuntu-OS@Username:~/../../AcDocker$ docker start -i id-container
root@id-container:/# 
Ubuntu-OS@Username:~/../../AcDocker$ docker exec -it -u Kimia 42ae5050631c bash
RESULT:
Kimia@ID-Docker:/$ 

________________________________________________________________
if you want access to /etc/shadow this is Result:
Kimia@ID-Docker:/$ cat /etc/shadow
cat: /etc/shadow: Permission denied
Kimia@ID-Docker:/$ 

________________________________________________________________
Images and Containers:
...

________________________________________________________________
Dockerfile Instructions:
-FROM
-WORKDIR
-COPY
-ADD
-RUN
-ENV
-EXPOSE
-USER
-CMD
-ENTRYPOINT

________________________________________________________________
Choosing the Right Base Image:
1- In theproject build Dockerfile
2- FROM (base-image)sample in https://docs.docker.com/samples/

________________________________________________________________
for run bash in node image:
Ubuntu-OS@Username:~/../../AcDocker$ docker run -it react-app sh 

________________________________________________________________
Copying Files and Directories:
In Dockerfile:
FROM node:14.16.0-alpine3.13
WORKDIR /app
COPY . . 
ADD . . 

________________________________________________________________
run a image and access to Bash:
Ubuntu-OS@Username:~/../../AcDocker$ docker run -it react-app sh

________________________________________________________________
Excluding Files and Directories:
1-build file: .dockerignore
2- write ingore big directorys like: node_modules/  

________________________________________________________________
Running Commands: این قسمت ممکنه زمان ببره Be patient. be passionate

Dependencies of a project in Dockerfile: be like this:
FROM node:14.16.0-alpine3.13
WORKDIR /app
COPY . . 
RUN npm install

________________________________________________________________
Setting Environment Variables:

In Dockerfile:
FROM node:14.16.0-alpine3.13
WORKDIR /app
COPY . .
RUN npm install
ENV API_URL=http//api.acronproject.com/

In CLI:
/app # printenv 
NODE_VERSION=XXX
HOSTNAME=XXX
YARN_VERSION=XXX
SHLVL=XXX
HOME=XXX
TERM=XXX
PATH=XXX
PWD=/app
API_URL=http//api.acronproject.com/

/app # echo $API_URL
http//api.acronproject.com/

/app # printenv API_URL
http//api.acronproject.com/

/app # 


________________________________________________________________
Exposing Ports:
Write this end of Dockerfile:
EXPOSE 3000

________________________________________________________________
Setting the User:
Write this end of Dockerfile:
RUN addgroup app && adduser -S -G app app
USER app

________________________________________________________________
Removing Images:
Ubuntu-OS@Username:~/../../AcDocker$ docker image prune 
WARNING! This will remove all dangling images.
Are you sure you want to continue? [y/N] y
Total reclaimed space: 0B
sina-lalebakhsh@sinalalebakhsh:~/Desktop/AcDocker$ 


As Well As, with write this you can get to help:
Ubuntu-OS@Username:~/../../AcDocker$ docker image

Usage:  docker image COMMAND

Manage images

Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE

Run 'docker image COMMAND --help' for more information on a command.



________________________________________________________________
Sharing Images:
For connect to docker hub
Ubuntu-OS@Username:~/../../AcDocker$ docker login


For update last tag use this:
Ubuntu-OS@Username:~/../../AcDocker$ docker image app-developing:NEW-TAG0.0.2 Username-in-Docker-Hub/app-developing:NEW-TAG0.0.2


After above command, write this for pushing:  
Ubuntu-OS@Username:~/../../AcDocker$ docker push Username-in-Docker-Hub/app-developing:NEW-TAG0.0.2


________________________________________________________________
Saving and Loading Images: